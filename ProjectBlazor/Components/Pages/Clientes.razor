@rendermode InteractiveServer
@using Microsoft.AspNetCore.Authorization

@page "/Clientes"
<h3>Clientes</h3>


<table class="table table-striped table-hover">
    <thead>
        <tr>
            <th>Nombre</th>
            <th>Apellido</th>
            <th>Email</th>
            <th>Fecha Nacimiento</th>
            <th>Acciones</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var cliente in clientes)
        {
            <tr>
                <td>@cliente.Nombre</td>
                <td>@cliente.Apellido</td>
                <td>@cliente.Email</td>
                <td>@cliente.FechaNacimiento.ToShortDateString()</td>
                <td>
                    <button class="btn btn-primary btn-sm" @onclick="() => SeleccionarCliente(cliente)">Editar</button>
                    <button class="btn btn-danger btn-sm" @onclick="() => EliminarCliente(cliente.Id)">Eliminar</button>
                </td>
            </tr>
        }
    </tbody>
</table>

<h3>@(editandoCliente ? "Editar Cliente" : "Agregar Cliente")</h3>

<EditForm Model="clienteActual" OnValidSubmit="@(editandoCliente ? ActualizarCliente : AgregarCliente)">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label>Nombre:</label>
        <InputText class="form-control" @bind-Value="clienteActual.Nombre" />
    </div>
    <div class="form-group">
        <label>Apellido:</label>
        <InputText class="form-control" @bind-Value="clienteActual.Apellido" />
    </div>
    <div class="form-group">
        <label>Email:</label>
        <InputText class="form-control" @bind-Value="clienteActual.Email" />
    </div>
    <div class="form-group">
        <label>Fecha de Nacimiento:</label>
        <InputDate class="form-control" @bind-Value="clienteActual.FechaNacimiento" />
    </div>

    <button class="btn @((editandoCliente) ? "btn-primary" : "btn-success")" type="submit">
        @((editandoCliente) ? "Actualizar Cliente" : "Agregar Cliente")
    </button>
    @if (editandoCliente)
    {
        <button class="btn btn-secondary" type="button" @onclick="CancelarEdicion">Cancelar</button>
    }
</EditForm>

@code {
    
    public class Cliente
    {
        public int Id { get; set; }
        public string Nombre { get; set; }
        public string Apellido { get; set; }
        public string Email { get; set; }
        public DateTime FechaNacimiento { get; set; }
    }

    
    private List<Cliente> clientes = new List<Cliente>
    {
        new Cliente { Id = 1, Nombre = "Juan", Apellido = "Perez", Email = "juan@example.com", FechaNacimiento = new DateTime(2004, 1, 1) },
        new Cliente { Id = 2, Nombre = "Maria", Apellido = "Gomez", Email = "maria@example.com", FechaNacimiento = new DateTime(2005, 5, 15) }
    };

    
    private Cliente clienteActual = new Cliente();
    private bool editandoCliente = false;

    
    private void AgregarCliente()
    {
        if (!string.IsNullOrEmpty(clienteActual.Nombre) && !string.IsNullOrEmpty(clienteActual.Apellido))
        {
            clienteActual.Id = clientes.Any() ? clientes.Max(c => c.Id) + 1 : 1; 
            clientes.Add(clienteActual); 
            clienteActual = new Cliente(); 
        }
        else
        {
            Console.WriteLine("Campos vacíos. Por favor ingresa toda la información.");
        }
    }

    
    private void SeleccionarCliente(Cliente cliente)
    {
        clienteActual = new Cliente
            {
                Id = cliente.Id,
                Nombre = cliente.Nombre,
                Apellido = cliente.Apellido,
                Email = cliente.Email,
                FechaNacimiento = cliente.FechaNacimiento
            };
        editandoCliente = true;
    }

    
    private void ActualizarCliente()
    {
        var clienteExistente = clientes.FirstOrDefault(c => c.Id == clienteActual.Id);
        if (clienteExistente != null)
        {
            clienteExistente.Nombre = clienteActual.Nombre;
            clienteExistente.Apellido = clienteActual.Apellido;
            clienteExistente.Email = clienteActual.Email;
            clienteExistente.FechaNacimiento = clienteActual.FechaNacimiento;
        }
        CancelarEdicion(); 
    }

    
    private void EliminarCliente(int id)
    {
        var cliente = clientes.FirstOrDefault(c => c.Id == id);
        if (cliente != null)
        {
            clientes.Remove(cliente);
        }
    }

    
    private void CancelarEdicion()
    {
        clienteActual = new Cliente();
        editandoCliente = false;
    }
}

